#include "user.h"


extern double FrameL[FRAMEL];
extern double FrameR[FRAMEL];

extern double Rx_BufferL[FRAMEL*3];

extern _State State_Switch;

int State_Supported[3] = {0,1,2};

extern double PNinput[FRAMEL];

void dss_sync()
{

	double *Rxpn;
	double Max_Rxpn_AbsShiftAdd;
	int Max_Pos;
	int Sync_pos;
	int Count_Acq;
	int Count_Fail;
	int Max_Acqtime;
	int Max_Sync_Jitter=8;
	int last_sync_pos;
	int Next_Start_Buffer_Index;
	double false_pos;
	int Max_Failtime=5;

//FILE *fp=fopen("./test/corr.txt","wb");

_corrstr corrvalue;


	if(State_Switch.Sync_State==0)
	{
		State_Switch.bufxlen = 0;
		State_Switch.Sync_State = 1;
		State_Switch.Count_Acq = 0;
		State_Switch.Count_Fail = 0;
		State_Switch.Max_Acqtime = 3;
		State_Switch.Max_Failtime = 0;
		State_Switch.Threshold = 0.047;
		State_Switch.Next_Start_Buffer_Index = 0;
		State_Switch.Sync_pos = 0;

	
	}
	else
	{
		Max_Acqtime = State_Switch.Max_Acqtime;

		last_sync_pos = State_Switch.Sync_pos;
		
		State_Switch.Current_Start_index = State_Switch.Next_Start_Buffer_Index;
		
		
		if(State_Switch.Sync_State==1)  //捕获状态
		{
			State_Switch.Next_Start_Buffer_Index = 0;
			State_Switch.bufxlen = FRAMEL;
		}
		else							 //跟踪状态
		{
			
			State_Switch.Next_Start_Buffer_Index = State_Switch.Current_Start_index;
			State_Switch.bufxlen = FRAMEL+State_Switch.Max_Sync_Jitter;
		}

		double *Rxpn = (double *)malloc((State_Switch.bufxlen + FRAMEL -1)*sizeof(double ));

		linxcorr_fft(Rxpn);

		double *Rxpn_AbsShiftAdd = (double*)malloc(FRAMEL*sizeof(double));

		Rxpn_AbsShiftAdd[FRAMEL-1] = Rxpn[FRAMEL-1];
		
		for(int i=0; i<FRAMEL-1;i++)
		{
			Rxpn_AbsShiftAdd[i] = Rxpn[i]+Rxpn[FRAMEL+i];

		}

	//	fwrite(Rxpn_AbsShiftAdd,sizeof(double),8191,fp);
	//	fclose(fp);


		if(State_Switch.Sync_State==1)
		{
			corrvalue = array_max(Rxpn_AbsShiftAdd,FRAMEL-1);
	
		}
		else 
		{
		//	if(State_Switch.Sync_State==2)
		//	{
		//	}
		}

		Sync_pos = corrvalue.positon;

		if ( State_Switch.Sync_State == 1)
		{
			Next_Start_Buffer_Index=0;
			
			if( Max_Rxpn_AbsShiftAdd<State_Switch.Threshold )
			{
				Count_Acq = 0;
				  
				State_Switch.Sync_State=1;

				Sync_pos =0;
			
			}
			else
				if(State_Switch.Count_Acq==0)
				{
					Count_Acq=1;
					State_Switch.Sync_State=1;

				
				}
			
			else
				if( min(  abs(Sync_pos-last_sync_pos-N) ,min( abs(Sync_pos-last_sync_pos),abs(Sync_pos-last_sync_pos+N) )) > Max_Sync_Jitter )//门限超过假同步识别
				{
					  
					  Count_Acq = 0;
					  
					  State_Switch.Sync_State = 1;
				}
			else
				if(State_Switch.Count_Acq == Max_Acqtime-1)
				{
					Count_Acq = Max_Acqtime;

					Count_Fail = 0;

					State_Switch.Sync_State = 2;

					Next_Start_Buffer_Index = Sync_pos+FRAMEL-Max_Sync_Jitter+1;

				}
			else
			{
				Count_Acq = Count_Acq+1;
				State_Switch.Sync_State=1;
			
			}

		}
		else 
		{
			if(State_Switch.Sync_State==2)
				if( Max_Rxpn_AbsShiftAdd<State_Switch.Threshold )
				{
					Count_Fail = Count_Fail+1;
					Sync_pos =0;
					
					if (Count_Fail ==Max_Failtime)
					{
						Sync_Pos =0;
						Count_Acq=0;
						State_Switch.Sync_State = 1;
					}
					else
					{
						State_Switch.Sync_State =2;
					}
				}
				else
				{
					Count_Acq = 0;
					
					State_Switch.Sync_State = 2
				}
		}


	
	}
	

}